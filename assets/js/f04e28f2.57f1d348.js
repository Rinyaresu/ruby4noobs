"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[280],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>g});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?n.createElement(g,i(i({ref:a},u),{},{components:t})):n.createElement(g,i({ref:a},u))}));function g(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5215:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const r={},i="Interpola\xe7\xe3o de String",l={unversionedId:"Basico da Linguagem/interpolacao",id:"Basico da Linguagem/interpolacao",title:"Interpola\xe7\xe3o de String",description:'Interpola\xe7\xe3o trata-se de combinar strings, mas n\xe3o usando o operador +. Dessa vez utilizaremos o s\xedmbolo #{ } para colocarmos o que queremos interpolar dentro de uma string. Em ruby \xe9 poss\xedvel interpolar qualquer tipo de dado. E \xe9 uma boa pr\xe1tica utilizar aspas duplas "" para interpolar strings. Como por exemplo:',source:"@site/docs/3-Basico da Linguagem/7-interpolacao.md",sourceDirName:"3-Basico da Linguagem",slug:"/Basico da Linguagem/interpolacao",permalink:"/ruby4noobs/Basico da Linguagem/interpolacao",draft:!1,tags:[],version:"current",lastUpdatedBy:"Fernando Melo",lastUpdatedAt:1693398040,formattedLastUpdatedAt:"30 de ago. de 2023",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Condicionais",permalink:"/ruby4noobs/Basico da Linguagem/condicionais"},next:{title:"Entrada e Sa\xedda",permalink:"/ruby4noobs/Basico da Linguagem/entrada-e-saida"}},s={},p=[{value:"Sequ\xeancias de escape",id:"sequ\xeancias-de-escape",level:2},{value:"Tabela de C\xf3digos Especiais",id:"tabela-de-c\xf3digos-especiais",level:3}],u={toc:p},d="wrapper";function c(e){let{components:a,...t}=e;return(0,o.kt)(d,(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interpola\xe7\xe3o-de-string"},"Interpola\xe7\xe3o de String"),(0,o.kt)("p",null,"Interpola\xe7\xe3o trata-se de combinar strings, mas n\xe3o usando o operador ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),". Dessa vez utilizaremos o s\xedmbolo ",(0,o.kt)("inlineCode",{parentName:"p"},"#{ }")," para colocarmos o que queremos interpolar dentro de uma string. Em ruby \xe9 poss\xedvel interpolar qualquer tipo de dado. E \xe9 uma boa pr\xe1tica utilizar aspas duplas ",(0,o.kt)("inlineCode",{parentName:"p"},'""')," para interpolar strings. Como por exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'nome = "Kaique"\n\nputs "Ol\xe1 meu nome \xe9 #{nome}"\n')),(0,o.kt)("p",null,"Executando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"=> Ol\xe1 meu nome \xe9 Kaique\n")),(0,o.kt)("p",null,"Vamos usar todos os tipos de dados:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'linguagem = "Ruby"\nano = 1995\ncriador = "Yukihiro \'Matz\' Matsumoto" # Usando aspas simples dentro de aspas duplas para conseguir usar aspas\n\nputs "A linguagem #{linguagem} foi criada em #{ano} e o criador \xe9 #{criador}"\n')),(0,o.kt)("p",null,"Executando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"=> A linguagem Ruby foi criada em 1995 e o criador \xe9 Yukihiro 'Matz' Matsumoto\n")),(0,o.kt)("p",null,"Outro exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'nome = "Mc Poze do Rodo"\nidade = "23"\ntelefone = "21 96666-7777"\ncidade = ["S\xe3o Paulo", "Rio de Janeiro"]\n\nputs "Ol\xe1, meu nome \xe9 #{nome} e tenho #{idade} anos, meu telefone \xe9 #{telefone} e moro em #{cidade[0]} e no #{cidade[1]}"\n')),(0,o.kt)("p",null,"Executando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"=> Ol\xe1, meu nome \xe9 Mc Poze do Rodo e tenho 23 anos, meu telefone \xe9 21 96666-7777 e moro em S\xe3o Paulo e no Rio de Janeiro\n")),(0,o.kt)("h2",{id:"sequ\xeancias-de-escape"},"Sequ\xeancias de escape"),(0,o.kt)("h3",{id:"tabela-de-c\xf3digos-especiais"},"Tabela de C\xf3digos Especiais"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"C\xf3digo Especiais"),(0,o.kt)("th",{parentName:"tr",align:null},"Significado"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\\n"),(0,o.kt)("td",{parentName:"tr",align:null},"Nova linha")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\\t"),(0,o.kt)("td",{parentName:"tr",align:null},"Tabula\xe7\xe3o")))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Strings")," n\xe3o precisam conter apenas texto. Eles tamb\xe9m podem conter caracteres de controle. A diferen\xe7a entre aspas simples ou duplas \xe9 que as aspas duplas permitem sequ\xeancias de escape, enquanto as aspas simples n\xe3o permitem. Exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'puts \'Ruby\\nPHP\'; # Aspas simples\n\nputs "Ruby\\nPHP"; # Aspas duplas + nova linha\n\nputs "Ruby\\tPHP"; # Aspas duplas + tabula\xe7\xe3o\n')),(0,o.kt)("p",null,"Executando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"=> Ruby\\nPHP\n   Ruby\n   PHP\n   Ruby    PHP\n")),(0,o.kt)("p",null,"No exemplo acima, ",(0,o.kt)("inlineCode",{parentName:"p"},"\\n")," \xe9 a sequ\xeancia de escape que representa o caractere de \u201cnova linha\u201d."),(0,o.kt)("p",null,"Com esses exemplos espero que voc\xea tenha obtido um pouco conhecimento sobre interpola\xe7\xe3o e a quantidade de coisas que voc\xea pode fazer com isso juntado como tudo que j\xe1 aprendemos. \ud83d\ude01"))}c.isMDXComponent=!0}}]);